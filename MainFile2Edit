import tkinter as tk



###################################Christian code####################################################


class Contact:
    errorMessages = []
    def __init__(self, first_name = "", last_name = "", phone = "" , email = "", street_address = "", home_city = "", home_state = "", home_zip = ""):
        self.name = first_name + " " +  last_name

        if len(str(phone)) == 10 or len(str(phone)) == 11:
            errorMessages.append("phone number must be 10 numbers (including area code)")
        else:
            self.phone = phone

        if '@' in email:
            errorMessages.append("e-mail must contain a domain")
        else:
            self.email = email

        if len(str(home_zip)) == 5:
            errorMessages.append("zip code must be 5 numbers")
        else:
            self.home = street_address + "\n" + home_city + ", " + home_state + " " + str(home_zip)

    def __str__(self):
        return("Name: {0}\nPhone Number: {1}\nE-mail Address: {2}\nHome Address: {3} ").format(self.name, self.phone, self.email, self.home)

    def name(self, first_name, last_name):
        self.name = first_name + " " + last_name

    def email(self, email):
        if '@' in email:
            errorMessages.append("e-mail must contain a domain")
        else:
            self.email = email

    def phone(self, phone):
        if len(str(phone)) == 10 or len(str(phone)) == 11:
            errorMessages.append("phone number must be 10 numbers (including area code)")
        else:
            self.phone = phone

    def home(self, street_address = "", home_city = "", home_state = "", home_zip = ""):
        if len(str(home_zip)) == 5:
            errorMessages.append("zip code must be 5 numbers")
        else:
            self.home = street_address + "\n" + home_city + ", " + home_state + " " + str(home_zip)

contacts_list = []

def retrieveContactInfo():
    try:
        contact_first_name = str(input("First Name: "))
        contact_last_name = str(input("Last Name: "))
        contact_phone = int(input("Phone Number: "))
        contact_email = str(input("E-mail Address: "))
        contact_street = str(input("Enter street address: "))
        contact_city = str(input("Enter city: "))
        contact_state = str(input("Enter state: "))
        contact_zip = int(input("Enter zip code: "))

        contact = Contact(contact_first_name, contact_last_name, contact_phone, contact_email,contact_street, contact_city, contact_state, contact_zip)

        if len(contact.errorMessages) > 0:
            print(contact.errorMessages)

        return contact
    except ValueError:
        print("Not a valid entry")

def addContact():
    try:
        contact = retrieveContactInfo()
        contacts_list.append(contact)
    except ValueError:
        print("Error in the entry")


def displayContacts():
    if len(contacts_list) == 0:
        for contact in contacts_list:
            print(contact.name)
    else:
        "No Contacts"

def searchContact():
    found_contacts_list = []
    search_contact = input("Search by Name or Number: ")
    search_contact_input = search_contact.lower()

    for contact in contacts_list:
        contact_name = contact.name
        contact_name = contact_name.lower()

        if search_contact_input in contact_name or contact.phone == search_contact_input:
            found_contacts_list.append(contact)

    if found_contacts_list == []:
        print("No Results Found")
    else:
        showContactInfo(contact)

def showContactInfo(contact):
    #incomplete until GUI
    # Just return values into corresponding fields
    print(contact)
    #str(contact)

def deleteContact():
    try:
        if contacts_list == []:
            print("No Contacts")
        else:
            nameToDelete = input("Enter the name to delete:" )

            for i in range(0, len(contacts_list)):
                currContact = contacts_list[i].name
                if nameToDelete in currContact:
                    print("deleting {0} ...".format(currContact))
                    del contacts_list[i]
    except IndexError:
        print("Out of range")



#######################################################################################################################


##########################################Jacobs code##################################################################
class LoginP():
    def __init__(self, master):
        self.master = master
        self.frame = tk.Frame(self.master)
        self.insideFrame = tk.Frame(width=200, height=100)
        master.geometry("950x550+500+150")
        master.resizable(width=False, height=False)

        self.LoginID = tk.Entry(master, width=25)
        self.LoginID.insert(0, 'Login ID')
        self.LoginID.place(x=325, y=155)
        self.IDlbl = tk.Label(text="Login ID")
        self.IDlbl.place(x=325, y=175)

        self.LoginPASS = tk.Entry(width=25)
        self.LoginPASS.insert(0, 'Password')
        self.LoginPASS.place(x=325, y=255)
        self.PASSlbl = tk.Label(text="Password")
        self.PASSlbl.place(x=325, y=275)

        self.insideFrame.place(x=325, y=325)

        def b1callback():
            self.load_window()
            #christian'sFunction(self.myEntry.get())
        self.button1 = tk.Button(self.insideFrame, text='login', width=28, command=b1callback)
        self.button1.pack()

        self.button2 = tk.Button(self.insideFrame, text='New User Registration', width=28, command=self.new_window)
        self.button2.pack()

    def __close(self):
        self.LoginID.destroy()
        self.IDlbl.destroy()
        self.LoginPASS.destroy()
        self.PASSlbl.destroy()
        self.button1.destroy()
        self.button2.destroy()


    def new_window(self):
        self.newWindow = tk.Toplevel(self.master)
        self.app = RegisterP(self.newWindow)

    def load_window(self):
        self.newWindow = self.master
        self.app = MainP(self.newWindow)
        self.__close()


#where yours guys code need to be put in the button functions
class MainP():
    def __init__(self, master):
        self.master = master
        self.frame = tk.Frame(self.master)
        self.insideFrame = tk.Frame(width=200, height=100)
        master.geometry("950x550+500+150")
        master.resizable(width=False, height=False)

        self.AddressL = tk.Listbox()
        self.AddressL.place(x=0, y=0)
        self.AddressL.config(width=45, height=34)

        self.insideFrame.place(x=275, y=485)




#################button functions##########################


#create new contact
#allow to edit entry boxes
        def contactCB():
          try:
            contact = retrieveContactInfo()
            contacts_list.append(contact)
          except ValueError:
            print("Error in the entry")
        self.Newbtn = tk.Button(self.insideFrame, text='New', width=18, command=contactCB)
        self.Newbtn.pack(side=tk.LEFT)


#allow to edit entry boxes

        self.Editbtn = tk.Button(self.insideFrame, text='Edit', width=18)
        self.Editbtn.pack(side=tk.LEFT)

#save contact information to current contacts data parameters
#disable editing entry boxes
        self.Savebtn = tk.Button(self.insideFrame, text='Save', width=18)
        self.Savebtn.pack(side=tk.LEFT)

#delete contact from list
        self.Deletebtn = tk.Button(self.insideFrame, text='Delete', width=18)
        self.Deletebtn.pack(side=tk.LEFT)

#just disable entry boxes and not save changes
        self.Cancelbtn = tk.Button(self.insideFrame, text='Cancel', width=18)
        self.Cancelbtn.pack(side=tk.LEFT)









#formating for labels and entry boxes

        self.Fname = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=155)
        self.Fnamelbl = tk.Label(text="First Name").place(x=325, y=175)

        self.Fname = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=155)
        self.Fnamelbl = tk.Label(text="First Name").place(x=325, y=175)

        self.Lname = tk.Entry(width=25, state=tk.DISABLED).place(x=575, y=155)
        self.Lnamelbl = tk.Label(text="Last Name").place(x=575, y=175)

        self.Phone = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=195)
        self.Phonelbl = tk.Label(text="Phone Number").place(x=325, y=215)

        self.Email = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=235)
        self.Emaillbl = tk.Label(text="Email").place(x=325, y=255)

        self.Street = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=275)
        self.Streetlbl = tk.Label(text="Address").place(x=325, y=295)

        self.City = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=315)
        self.Citylbl = tk.Label(text="City").place(x=325, y=335)

        self.State = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=355)
        self.Statelbl = tk.Label(text="State").place(x=325, y=375)

        self.Zip = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=395)
        self.Ziplbl = tk.Label(text="Zip Code").place(x=325, y=415)

#############dont worry about stuff here for now#######################
class RegisterP:
    def __init__(self, master):
        self.master = master
        self.frame = tk.Frame(self.master)
        #self.insideFrame = tk.Frame(width=200, height=100)
        master.geometry("950x550+500+150")
        master.resizable(width=False, height=False)

        self.Fname = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=155)
        self.Fnamelbl = tk.Label(text="First Name").place(x=325, y=175)

        self.Fname = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=155)
        self.Fnamelbl = tk.Label(text="First Name").place(x=325, y=175)

        self.Lname = tk.Entry(width=25, state=tk.DISABLED).place(x=575, y=155)
        self.Lnamelbl = tk.Label(text="Last Name").place(x=575, y=175)

        self.Phone = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=195)
        self.Phonelbl = tk.Label(text="Phone Number").place(x=325, y=215)

        self.Email = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=235)
        self.Emaillbl = tk.Label(text="Email").place(x=325, y=255)

        self.Street = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=275)
        self.Streetlbl = tk.Label(text="Address").place(x=325, y=295)

        self.City = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=315)
        self.Citylbl = tk.Label(text="City").place(x=325, y=335)

        self.State = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=355)
        self.Statelbl = tk.Label(text="State").place(x=325, y=375)

        self.Zip = tk.Entry(width=25, state=tk.DISABLED).place(x=325, y=395)
        self.Ziplbl = tk.Label(text="Zip Code").place(x=325, y=415)

    def close_windows(self):
        self.master.destroy()

def main():
    root = tk.Tk()
    app = LoginP(root)
    root.mainloop()

if __name__ == '__main__':
    main()

####################################################################################################################

